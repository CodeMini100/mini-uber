name: Run Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-json-report

      - name: Run Python tests
        run: |
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "[" > test_results.json
          first_entry=true
          
          # Function to add a test result
          add_test_result() {
            local module=$1
            local category=$2
            local test_name=$3
            local status=$4
            
            if [ "$first_entry" = "true" ]; then
              first_entry=false
            else
              echo "," >> test_results.json
            fi
            
            echo '{
              "module": "'$module'",
              "category": "'$category'",
              "test_name": "'$test_name'",
              "status": "'$status'",
              "attempted_at": "'$timestamp'",
              "completed_at": "'$timestamp'"
            }' >> test_results.json
          }
          
          if [ -d "tests" ]; then
            echo "Found tests directory, discovering tests..."
            
            # Find all test files and their modules/categories
            find tests -type f -name "test_*.py" | while read -r test_file; do
              # Extract module and category from path
              # Example: tests/module1/category1/test_something.py
              # becomes module=module1, category=category1
              path_parts=(${test_file//\// })
              if [ ${#path_parts[@]} -ge 4 ]; then
                module=${path_parts[1]}
                category=${path_parts[2]}
                test_name=${path_parts[-1]%.*} # Remove .py extension
                
                echo "Running tests for module: $module, category: $category, test: $test_name"
                
                # Run pytest for this specific test file with JSON reporting
                if PYTHONPATH=. pytest "$test_file" --json-report --json-report-file=report.json -v > test_output.txt 2>&1; then
                  # Parse the JSON report to get detailed test results
                  if [ -f "report.json" ]; then
                    test_status=$(python3 -c '
import json
with open("report.json") as f:
    data = json.load(f)
print("passed" if data["summary"]["failed"] == 0 else "failed")
')
                  else
                    test_status="passed"  # Default to passed if no report file
                  fi
                  add_test_result "$module" "$category" "$test_name" "$test_status"
                else
                  add_test_result "$module" "$category" "$test_name" "failed"
                fi
              fi
            done
            
            if [ "$first_entry" = "true" ]; then
              # No tests were found, add a placeholder result
              add_test_result "unknown" "unknown" "No Tests Found" "not_attempted"
            fi
          else
            echo "No tests directory found"
            add_test_result "setup" "initialization" "Test Directory Check" "failed"
          fi
          
          echo "]" >> test_results.json
          
          echo "Final test results:"
          cat test_results.json
        continue-on-error: true
      
      # Upload test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_results.json
          if-no-files-found: warn

      # Notify completion
      - name: Notify completion
        if: always()
        run: |
          echo "Test run completed. Check the test_results.json artifact for detailed results."
          cat test_results.json || echo "No test results file found" 
