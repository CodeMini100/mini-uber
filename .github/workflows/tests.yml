name: Python Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2  # Fetch at least two commits for diff
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Install pytest and compatible packages first
        pip install pytest==7.3.1 pytest-cov==4.1.0 pytest-asyncio==0.21.0
        
        # Install main requirements
        if [ -f requirements.txt ]; then
          echo "Installing main requirements..."
          pip install -r requirements.txt
        fi
        
        # Install test requirements (except pytest which we've installed with specific version)
        if [ -f tests/requirements.txt ]; then
          echo "Installing test requirements (excluding pytest)..."
          grep -v "pytest" tests/requirements.txt | xargs -r pip install
        fi
        
        # Ensure other necessary packages are installed
        pip install httpx fastapi
        
    - name: Run tests and capture results
      id: test-run
      run: |
        mkdir -p test_artifacts
        
        # Try to run the tests, but always succeed (true command will ensure successful exit)
        python -m pytest -v > test_artifacts/test_results.txt 2>&1 || true
        
        # Store the exit status for informational purposes
        TEST_STATUS=$?
        echo "status=$TEST_STATUS" >> $GITHUB_ENV
        
        # Print the full test results for clearer debugging
        echo "=========================================="
        echo "COMPLETE TEST RESULTS OUTPUT:"
        echo "=========================================="
        cat test_artifacts/test_results.txt
        echo "=========================================="
        
        if [ $TEST_STATUS -eq 0 ]; then
          echo "Tests passed successfully!"
        else
          echo "Tests failed with status $TEST_STATUS"
        fi

    - name: Collect repository files and print data
      run: |
        echo "=========================================="
        echo "COLLECTING FILES AND PRINTING PAYLOAD DATA"
        echo "=========================================="
        mkdir -p test_artifacts/repo_files
        
        # Collect files from each directory
        echo "COLLECTING PYTHON FILES FROM SPECIFIED DIRECTORIES:"
        
        # Function to collect and print files
        collect_and_print_files() {
          local dir=$1
          
          if [ ! -d "$dir" ]; then
            echo "Directory $dir does not exist"
            return
          fi
          
          echo "Directory: $dir"
          files_found=$(find "$dir" -name "*.py" -type f -not -path "*/\.*" -not -path "*/__pycache__/*")
          
          if [ -z "$files_found" ]; then
            echo "  No Python files found in $dir"
            return
          fi
          
          echo "  Files found:"
          for file in $files_found; do
            echo "  - $file"
            mkdir -p "test_artifacts/repo_files/$(dirname "$file")"
            cp "$file" "test_artifacts/repo_files/$file"
            
            # Print the file contents
            echo "    CONTENTS OF $file:"
            echo "    ---------------------------------------------------"
            cat "$file"
            echo "    ---------------------------------------------------"
          done
        }
        
        collect_and_print_files "payments"
        collect_and_print_files "ratings"
        collect_and_print_files "riders"
        collect_and_print_files "rides"
        collect_and_print_files "drivers"
        
        # Copy and print individual files
        echo "INDIVIDUAL FILES:"
        for file in "main.py" "config.py"; do
          if [ -f "$file" ]; then
            echo "- $file"
            cp "$file" "test_artifacts/repo_files/$file"
            
            echo "  CONTENTS OF $file:"
            echo "  ---------------------------------------------------"
            cat "$file"
            echo "  ---------------------------------------------------"
          else
            echo "- $file (not found)"
          fi
        done
        
        # Encode test results as base64
        TEST_RESULTS_BASE64=$(cat test_artifacts/test_results.txt | base64 -w 0)
        
        # Prepare payload
        cat > test_artifacts/payload.json << EOF
        {
          "test_results_base64": "${TEST_RESULTS_BASE64}",
          "repo_files": {}
        }
        EOF
        
        # Add repository files to payload
        jq '.repo_files = {}' test_artifacts/payload.json > test_artifacts/payload_with_files.json
        
        find test_artifacts/repo_files -type f -name "*.py" | while read file; do
          rel_path=$(echo "$file" | sed 's|test_artifacts/repo_files/||')
          FILE_CONTENT=$(cat "$file" | jq -Rs .)
          jq --arg file "$rel_path" --arg content "$FILE_CONTENT" '.repo_files[$file] = $content' test_artifacts/payload_with_files.json > test_artifacts/payload_tmp.json
          mv test_artifacts/payload_tmp.json test_artifacts/payload_with_files.json
        done
        
        mv test_artifacts/payload_with_files.json test_artifacts/payload.json
        
        # Print summary of the payload
        echo "=========================================="
        echo "SUMMARY OF PAYLOAD"
        echo "=========================================="
        echo "Payload size: $(wc -c < test_artifacts/payload.json) bytes"
        echo "Number of files in payload: $(jq '.repo_files | keys | length' test_artifacts/payload.json)"
        
        echo "List of files in payload:"
        jq -r '.repo_files | keys[]' test_artifacts/payload.json | sort
        
        echo "=========================================="
        echo "ORIGINAL TEST RESULTS (for verification)"
        echo "=========================================="
        # Decode and print base64 test results to verify it's correct
        echo "$TEST_RESULTS_BASE64" | base64 --decode
        
        # Create placeholder for mock response
        echo "=========================================="
        echo "DEBUG: API CALL WOULD BE SENT TO VERCEL"
        echo "=========================================="
        echo "API call skipped for debugging purposes"
        echo "Using placeholder feedback instead"
        
        # Mock response
        cat > test_artifacts/ai_feedback.md << EOF
        ## Debug Mode: Analysis of Repository Data
        
        This is a placeholder message. In production, this would be AI-generated feedback.
        
        The payload contained:
        - Complete test results
        - $(jq '.repo_files | keys | length' test_artifacts/payload.json) Python files
        EOF

    - name: Comment on PR with feedback 
      if: github.event_name == 'pull_request'
      run: |
        # Check if feedback file exists
        if [ -f "test_artifacts/ai_feedback.md" ]; then
          # Read the feedback from file
          FEEDBACK=$(cat test_artifacts/ai_feedback.md)
          
          # Determine the appropriate title based on test status
          if [ "${{ env.status }}" == "0" ]; then
            TITLE="AI Analysis of Test Results"
          else
            TITLE="AI Analysis of Test Failures"
          fi
          
          # Use GitHub REST API directly with curl
          curl -X POST \
            -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -d "{\"body\":\"# $TITLE\n\n$FEEDBACK\"}"
        else
          echo "Warning: Feedback file not found"
        fi