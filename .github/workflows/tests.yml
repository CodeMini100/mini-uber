name: Python Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2  # Fetch at least two commits for diff
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # List installed packages for debugging
        pip list
        
        # Install pytest and compatible packages first
        pip install pytest==7.3.1 pytest-cov==4.1.0 pytest-asyncio==0.21.0
        
        # Install main requirements
        if [ -f requirements.txt ]; then
          echo "Installing main requirements..."
          pip install -r requirements.txt
        fi
        
        # Install test requirements (except pytest which we've installed with specific version)
        if [ -f tests/requirements.txt ]; then
          echo "Installing test requirements (excluding pytest)..."
          grep -v "pytest" tests/requirements.txt | xargs -r pip install
        fi
        
        # Ensure other necessary packages are installed
        pip install httpx fastapi
        
        # Show final list of installed packages
        echo "Final installed packages:"
        pip list
        
    - name: Run tests and capture results
      id: test-run
      run: |
        mkdir -p test_artifacts
        
        # Try to run the tests, but always succeed (true command will ensure successful exit)
        python -m pytest -v > test_artifacts/test_results.txt 2>&1 || true
        
        # Store the exit status for informational purposes
        TEST_STATUS=$?
        echo "status=$TEST_STATUS" >> $GITHUB_ENV
        
        # Print the test results for easier debugging
        echo "=== TEST RESULTS ==="
        cat test_artifacts/test_results.txt
        echo "=================="
        
        if [ $TEST_STATUS -eq 0 ]; then
          echo "Tests passed successfully!"
        else
          echo "Tests failed with status $TEST_STATUS"
        fi

    - name: DEBUG - Collect repository files and print context
      # Run this step for every job, regardless of test result
      run: |
        echo "=== DEBUG MODE: Collecting files and printing context ==="
        mkdir -p test_artifacts/repo_files
        
        # Create a function to collect Python files
        collect_dir_files() {
          local dir=$1
          
          # Skip if directory doesn't exist
          if [ ! -d "$dir" ]; then
            echo "Directory $dir does not exist, skipping"
            return
          fi
          
          echo "Collecting files from $dir"
          files_count=$(find "$dir" -name "*.py" -type f -not -path "*/\.*" -not -path "*/__pycache__/*" | wc -l)
          echo "Found $files_count Python files in $dir"
          
          find "$dir" -name "*.py" -type f -not -path "*/\.*" -not -path "*/__pycache__/*" | while read file; do
            dest_file="test_artifacts/repo_files/$file"
            mkdir -p "$(dirname "$dest_file")"
            cp "$file" "$dest_file"
            echo "  - Copied $file"
          done
        }
        
        # Collect files from each directory
        echo "Collecting Python files from specified directories..."
        collect_dir_files "payments"
        collect_dir_files "ratings"
        collect_dir_files "riders"
        collect_dir_files "rides"
        collect_dir_files "drivers"
        
        # Copy individual files
        echo "Copying main.py and config.py..."
        if [ -f main.py ]; then
          cp main.py test_artifacts/repo_files/main.py
          echo "  - Copied main.py"
        else
          echo "  - WARNING: main.py not found"
        fi
        
        if [ -f config.py ]; then
          cp config.py test_artifacts/repo_files/config.py
          echo "  - Copied config.py"
        else
          echo "  - WARNING: config.py not found"
        fi
        
        # Print summary of collected files
        echo "=== Collected Files Summary ==="
        find test_artifacts/repo_files -type f | sort
        echo "Total files: $(find test_artifacts/repo_files -type f | wc -l)"
        
        # Encode test results as base64 to preserve formatting
        TEST_RESULTS_BASE64=$(cat test_artifacts/test_results.txt | base64 -w 0)
        echo "Test results encoded as base64 (first 100 chars): ${TEST_RESULTS_BASE64:0:100}..."
        
        # Create initial JSON payload with test results only
        cat > test_artifacts/payload.json << EOF
        {
          "test_results_base64": "${TEST_RESULTS_BASE64}",
          "repo_files": {}
        }
        EOF
        
        # Add all repository files to payload
        echo "Adding repository files to payload..."
        jq '.repo_files = {}' test_artifacts/payload.json > test_artifacts/payload_with_files.json
        
        find test_artifacts/repo_files -type f -name "*.py" | while read file; do
          # Get relative path
          rel_path=$(echo "$file" | sed 's|test_artifacts/repo_files/||')
          
          # Add file content to the payload
          FILE_CONTENT=$(cat "$file" | jq -Rs .)
          jq --arg file "$rel_path" --arg content "$FILE_CONTENT" '.repo_files[$file] = $content' test_artifacts/payload_with_files.json > test_artifacts/payload_tmp.json
          mv test_artifacts/payload_tmp.json test_artifacts/payload_with_files.json
          echo "  - Added $rel_path to payload"
        done
        
        mv test_artifacts/payload_with_files.json test_artifacts/payload.json
        
        # Print summary of payload content
        echo "=== Payload Content Summary ==="
        echo "Payload size: $(wc -c < test_artifacts/payload.json) bytes"
        echo "Number of files in payload: $(jq '.repo_files | keys | length' test_artifacts/payload.json)"
        echo "Files included in payload:"
        jq '.repo_files | keys' test_artifacts/payload.json
        
        # Print the first few characters of each file for verification
        echo "=== Sample File Contents ==="
        for file_path in $(jq -r '.repo_files | keys[]' test_artifacts/payload.json | head -3); do
          echo "File: $file_path"
          jq -r ".repo_files[\"$file_path\"]" test_artifacts/payload.json | head -5
          echo "..."
        done
        
        echo "=== DEBUG: API Call Would Send to: https://uber-feedback-agent.vercel.app/api/analyze ==="
        echo "API call skipped for debugging purposes"
        
        # Create a mock response for testing
        cat > test_artifacts/ai_feedback.md << EOF
        ## DEBUG MODE: API Call Skipped

        This is a placeholder feedback message for debugging purposes.
        
        The payload was successfully prepared with:
        - Test results (encoded in base64)
        - $(jq '.repo_files | keys | length' test_artifacts/payload.json) Python files from your repository
        
        In normal operation, this would be replaced with AI-generated feedback about your tests.
        EOF
        
        # Display mock feedback
        echo "=== DEBUG: Mock AI Analysis (API call skipped) ==="
        cat test_artifacts/ai_feedback.md

    - name: Comment on PR with feedback 
      if: github.event_name == 'pull_request'
      run: |
        # Check if feedback file exists
        if [ -f "test_artifacts/ai_feedback.md" ]; then
          # Read the feedback from file
          FEEDBACK=$(cat test_artifacts/ai_feedback.md)
          
          # Determine the appropriate title based on test status
          if [ "${{ env.status }}" == "0" ]; then
            TITLE="AI Analysis of Test Results"
          else
            TITLE="AI Analysis of Test Failures"
          fi
          
          # Use GitHub REST API directly with curl
          curl -X POST \
            -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -d "{\"body\":\"# $TITLE\n\n$FEEDBACK\"}"
        else
          echo "Warning: Feedback file not found"
        fi